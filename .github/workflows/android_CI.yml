name: Continuous Integration Android

on:
  push:
    branches: [development]
  workflow_dispatch:

env:
  JAVA_VERSION: 8
  API_LEVEL: 29

jobs:
  unit_tests:
    name: Testing
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      # Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Set up JDK 11 & Restore Gradle Cache
      - name: Setup JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "adopt"
          cache: gradle

      # Run Unit Tests
      #- name: Run Unit Tests
      #  run: ./gradlew testDebugUnitTest  --continue

      # Upload Test Reports
      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-reports
          path: app/build/reports/tests/

  linter:
    name: Linting
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      # Checkout Repository
      - name: Checkout
        uses: actions/checkout@v2

      # Set up JDK 11 & Restore Gradle Cache
      - name: Setup JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "adopt"
          cache: gradle

      # Run Debug Linter
      # - name: Run Debug Linter
      #   run: ./gradlew lintDebug

      # Upload Linter Report
      - name: Upload Linter Reports
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: linter-report
          path: app/build/reports/lint-results-*

  build_debug_apk:
    name: Building Debug APK
    #     needs: [emulator_test]
    runs-on: ubuntu-latest
    needs: [unit_tests]
    steps:
      # Checkout Repository
      - name: Checkout
        uses: actions/checkout@v2

      # Set up JDK 11 & Restore Gradle Cache
      - name: Setup JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "adopt"
          cache: gradle

      # Build Debug APK
      # - name: Build Debug APK
      #   run: ./gradlew assembleDebug

      # Upload APK
      - name: Upload APK
        uses: actions/upload-artifact@v2
        with:
          name: app-debug.apk
          path: app/build/outputs/apk/debug/**.apk
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Setup JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Run Tests
        run: bash ./gradlew test --stacktrace
  apk:
    name: Generate APK
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Setup JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Build APK
        run: bash ./gradlew assembleDebug --stacktrace
      - name: Upload APK
        uses: actions/upload-artifact@v1
        with:
          name: apk
          path: app/build/outputs/apk/debug/app-debug.apk
  release:
    name: Release APK
    needs: apk
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download APK from build
        uses: actions/download-artifact@v1
        with:
          name: apk
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
      - name: Upload Release APK
        id: upload_release_asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: apk/app-debug.apk
          asset_name: MensaApp.apk
          asset_content_type: application/zip
